import{_ as e,c as s,o as i,a6 as a}from"./chunks/framework.Z133WHs2.js";const u=JSON.parse('{"title":"Adding demos","description":"","frontmatter":{},"headers":[],"relativePath":"adding_demos.md","filePath":"adding_demos.md","lastUpdated":null}'),t={name:"adding_demos.md"},n=a(`<h1 id="Adding-demos" tabindex="-1">Adding demos <a class="header-anchor" href="#Adding-demos" aria-label="Permalink to &quot;Adding demos {#Adding-demos}&quot;">​</a></h1><p>To add a demo / example, you can add a Julia file to the folder in <code>examples</code> which best fits its purpose.</p><h2 id="File-structure" tabindex="-1">File structure <a class="header-anchor" href="#File-structure" aria-label="Permalink to &quot;File structure {#File-structure}&quot;">​</a></h2><p>GeoMakie uses <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a> to generate the examples, so the files must conform to its syntax.</p><p>Functional requirements are:</p><ul><li><p>A title as a level-1 heading</p></li><li><p>Saving the cover image in the <code>covers</code> folder - each example has such code.</p></li><li><p>At each stage, return a <code>FigureLike</code>. You can simply dispose of things for it to work...</p></li></ul><p>When adding the code to save to <code>covers</code>, you must add the following exactly:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># make cover image #jl</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mkpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;covers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#hide</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;covers/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(splitext(basename(@__FILE__))[1])</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fig) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#hide</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #hide</span></span></code></pre></div><p>assuming <code>fig</code> is the main figure of that example.</p><p>The first comment is important, so that there is a separation between the code block above this one, and this one. Otherwise, the last figure will not be displayed!</p><p>We also require that the comments in the file be of sufficient quantity and quality to explain what is going on to a newcomer.</p>`,11),l=[n];function o(d,h,p,r,c,k){return i(),s("div",null,l)}const m=e(t,[["render",o]]);export{u as __pageData,m as default};
