import{_ as s,c as a,o as i,a6 as n}from"./chunks/framework.Z133WHs2.js";const t="/previews/PR230/assets/ugzvasc.C9OuEI70.png",e="/previews/PR230/assets/glzjqat.DDdKTGJX.png",p="/previews/PR230/assets/goyihzx.DnMj5Yx9.png",f=JSON.parse('{"title":"Multiple CRS in one axis","description":"","frontmatter":{},"headers":[],"relativePath":"examples/multiple_crs.md","filePath":"examples/multiple_crs.md","lastUpdated":null}'),l={name:"examples/multiple_crs.md"},h=n(`<h1 id="Multiple-CRS-in-one-axis" tabindex="-1">Multiple CRS in one axis <a class="header-anchor" href="#Multiple-CRS-in-one-axis" aria-label="Permalink to &quot;Multiple CRS in one axis {#Multiple-CRS-in-one-axis}&quot;">​</a></h1><p>This is an example of how you can use multiple CRS in one plot.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie, GeoMakie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters, RasterDataSources, ArchGDAL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ras </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Raster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EarthEnv{HabitatHeterogeneity}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:homogeneity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>╭───────────────────────────────────────╮</span></span>
<span class="line"><span>│ 1728×696 Raster{UInt16,2} homogeneity │</span></span>
<span class="line"><span>├───────────────────────────────────────┴──────────────────────────────── dims ┐</span></span>
<span class="line"><span>  ↓ X Projected{Float64} LinRange{Float64}(-180.0, 179.79166666666669, 1728) ForwardOrdered Regular Intervals{Start},</span></span>
<span class="line"><span>  → Y Projected{Float64} LinRange{Float64}(84.79166666666667, -60.0, 696) ReverseOrdered Regular Intervals{Start}</span></span>
<span class="line"><span>├──────────────────────────────────────────────────────────────────── metadata ┤</span></span>
<span class="line"><span>  Metadata{Rasters.GDALsource} of Dict{String, Any} with 4 entries:</span></span>
<span class="line"><span>  &quot;units&quot;    =&gt; &quot;&quot;</span></span>
<span class="line"><span>  &quot;offset&quot;   =&gt; 0.0</span></span>
<span class="line"><span>  &quot;filepath&quot; =&gt; &quot;/home/runner/.julia/artifacts/EarthEnv/HabitatHeterogeneity/25…</span></span>
<span class="line"><span>  &quot;scale&quot;    =&gt; 1.0</span></span>
<span class="line"><span>├────────────────────────────────────────────────────────────────────── raster ┤</span></span>
<span class="line"><span>  extent: Extent(X = (-180.0, 180.00000000000003), Y = (-60.0, 85.0))</span></span>
<span class="line"><span>  missingval: 0xffff</span></span>
<span class="line"><span>  crs: GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AXIS[&quot;Latitude&quot;,NORTH],AXIS[&quot;Longitude&quot;,EAST],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</span></span>
<span class="line"><span>└──────────────────────────────────────────────────────────────────────────────┘</span></span>
<span class="line"><span>    ↓ →        84.7917      84.5833  …     -59.5833     -59.7917     -60.0</span></span>
<span class="line"><span> -180.0    0xffff       0xffff          0xffff       0xffff       0xffff</span></span>
<span class="line"><span>    ⋮                                ⋱                    ⋮       </span></span>
<span class="line"><span>  179.792  0xffff       0xffff          0xffff       0xffff       0xffff</span></span></code></pre></div><p>Let&#39;s simulate a new CRS, assuming this was an image taken from a geostationary satellite, hovering above 72° E:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projected_ras </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">warp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ras,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;s_srs&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GeoFormatTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ProjString, Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">crs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ras))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># source CRS</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;t_srs&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;+proj=geos +h=3578600 +lon_0=72&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # the CRS to which this should be transformed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>╭────────────────────────────────────────╮</span></span>
<span class="line"><span>│ 1320×1315 Raster{UInt16,2} homogeneity │</span></span>
<span class="line"><span>├────────────────────────────────────────┴─────────────────────────────── dims ┐</span></span>
<span class="line"><span>  ↓ X Projected{Float64} LinRange{Float64}(-2.486249645439198e6, 2.482616027312147e6, 1320) ForwardOrdered Regular Intervals{Start},</span></span>
<span class="line"><span>  → Y Projected{Float64} LinRange{Float64}(2.4773207062691883e6, -2.472709236107815e6, 1315) ReverseOrdered Regular Intervals{Start}</span></span>
<span class="line"><span>├──────────────────────────────────────────────────────────────────── metadata ┤</span></span>
<span class="line"><span>  Metadata{Rasters.GDALsource} of Dict{String, Any} with 4 entries:</span></span>
<span class="line"><span>  &quot;units&quot;    =&gt; &quot;&quot;</span></span>
<span class="line"><span>  &quot;offset&quot;   =&gt; 0.0</span></span>
<span class="line"><span>  &quot;filepath&quot; =&gt; &quot;/vsimem/tmp&quot;</span></span>
<span class="line"><span>  &quot;scale&quot;    =&gt; 1.0</span></span>
<span class="line"><span>├────────────────────────────────────────────────────────────────────── raster ┤</span></span>
<span class="line"><span>  extent: Extent(X = (-2.486249645439198e6, 2.4863831733870152e6), Y = (-2.472709236107815e6, 2.4810878523440566e6))</span></span>
<span class="line"><span>  missingval: 0xffff</span></span>
<span class="line"><span>  crs: PROJCS[&quot;unknown&quot;,GEOGCS[&quot;unknown&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]]],PROJECTION[&quot;Geostationary_Satellite&quot;],PARAMETER[&quot;central_meridian&quot;,72],PARAMETER[&quot;satellite_height&quot;,3578600],PARAMETER[&quot;false_easting&quot;,0],PARAMETER[&quot;false_northing&quot;,0],UNIT[&quot;metre&quot;,1,AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]],AXIS[&quot;Easting&quot;,EAST],AXIS[&quot;Northing&quot;,NORTH]]</span></span>
<span class="line"><span>└──────────────────────────────────────────────────────────────────────────────┘</span></span>
<span class="line"><span>  ↓ →             2.47732e6  …      -2.46894e6      -2.47271e6</span></span>
<span class="line"><span> -2.48625e6  0xffff             0xffff          0xffff</span></span>
<span class="line"><span>  ⋮                          ⋱       ⋮          </span></span>
<span class="line"><span>  2.48262e6  0xffff             0xffff          0xffff</span></span></code></pre></div><p>This is what the raster would look like, if it were taken directly from a satellite image:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heatmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projected_ras; axis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; aspect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DataAspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span></code></pre></div><p><img src="`+t+`" alt=""></p><p>Now, we can create a GeoAxis with coastlines in the equal earth projection:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ga </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeoAxis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ga, GeoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coastlines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+e+`" alt=""></p><p>The coastlines function returns points in the (lon, lat) coordinate reference system.</p><p>We will now plot our image, from the geostationary coordinate system:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">surface!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ga, projected_ras; shading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoShading, source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">crs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projected_ras))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+p+'" alt=""></p><p>Success! You can clearly see how the raster was adapted here.</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>',20),o=[h];function r(k,u,c,d,g,E){return i(),a("div",null,o)}const y=s(l,[["render",r]]);export{f as __pageData,y as default};
