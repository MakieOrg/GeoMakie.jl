import{_ as e,c as a,o as t,a6 as i}from"./chunks/framework.BaVm-kcO.js";const g=JSON.parse('{"title":"Adding demos","description":"","frontmatter":{},"headers":[],"relativePath":"adding_demos.md","filePath":"adding_demos.md","lastUpdated":null}'),s={name:"adding_demos.md"},o=i('<h1 id="Adding-demos" tabindex="-1">Adding demos <a class="header-anchor" href="#Adding-demos" aria-label="Permalink to &quot;Adding demos {#Adding-demos}&quot;">​</a></h1><p>To add a demo / example, you can add a Julia file to the folder in <code>examples</code> which best fits its purpose. You must also add the name of the file to the overview gallery blocks in <code>docs/src/examples.md</code>, and the whitelist array in <code>docs/src/make.jl</code>.</p><p><a href="https://github.com/MakieOrg/GeoMakie.jl/pull/246" target="_blank" rel="noreferrer">This PR</a> is an example of how to do this.</p><h2 id="File-structure" tabindex="-1">File structure <a class="header-anchor" href="#File-structure" aria-label="Permalink to &quot;File structure {#File-structure}&quot;">​</a></h2><p>GeoMakie uses <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a> to generate the examples, so the files must conform to its syntax.</p><p>Functional requirements are:</p><ul><li><p>A title as a level-1 heading at the top of the page.</p></li><li><p>Declaring metadata at the bottom of the page via a <code>@cardmeta</code> block.</p></li><li><p>At each stage, return a <code>FigureLike</code>.</p></li></ul><p>When adding the code to save to <code>covers</code>, you must add the following code to the bottom of your Julia file:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#=</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">```@cardmeta</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Cover = fig</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Description = &quot;A very short description of the example&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Title = &quot;Some title, optional&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">```</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">=#</span></span></code></pre></div><p>assuming <code>fig</code> is the main figure of that example.</p><p>Note that all of this code is commented out - this is important, otherwise Documenter.jl will not be able to pick it up.</p><p>You can even pass a compound expression as <code>Cover = begin ... end</code> if you want to create a custom cover figure. This will all be evaluated in the same scope as your example, but after all the code is executed.</p><p>We also require that the comments in the file be of sufficient quantity and quality to explain what is going on to a newcomer.</p><h2 id="What-is-actually-going-on" tabindex="-1">What is actually going on <a class="header-anchor" href="#What-is-actually-going-on" aria-label="Permalink to &quot;What is actually going on {#What-is-actually-going-on}&quot;">​</a></h2><p>In GeoMakie, we&#39;ve created two custom Documenter blocks - <code>@cardmeta</code> and <code>@overviewgallery</code>. The <code>@cardmeta</code> block adds metadata (cover image, title, description, etc) to a global dict. The <code>@overviewgallery</code> block retrieves this metadata and renders a grid of example cards in HTML, styled by the styles in <code>styles.css</code>.</p>',15),l=[o];function n(d,r,c,p,h,u){return t(),a("div",null,l)}const k=e(s,[["render",n]]);export{g as __pageData,k as default};
