import{_ as s}from"./chunks/e49fT6n7UV.Dm4YaeON.js";import{_ as a,c as e,o as i,a6 as t}from"./chunks/framework.CGT_YDk7.js";const n="/previews/PR257/assets/twtwshg.CQizWUQT.png",E=JSON.parse('{"title":"Multiple CRS in one axis","description":"","frontmatter":{},"headers":[],"relativePath":"examples/multiple_crs.md","filePath":"examples/multiple_crs.md","lastUpdated":null}'),p={name:"examples/multiple_crs.md"},l=t('<h1 id="Multiple-CRS-in-one-axis" tabindex="-1">Multiple CRS in one axis <a class="header-anchor" href="#Multiple-CRS-in-one-axis" aria-label="Permalink to &quot;Multiple CRS in one axis {#Multiple-CRS-in-one-axis}&quot;">​</a></h1><img src="'+s+`"><p>This is an example of how you can use multiple CRS in one plot.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using CairoMakie, GeoMakie</span></span>
<span class="line"><span>using Rasters, RasterDataSources, ArchGDAL</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ras = Raster(EarthEnv{HabitatHeterogeneity}, :homogeneity)</span></span></code></pre></div><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>heatmap(ras; axis = (; aspect = DataAspect()))</span></span></code></pre></div><p>Let&#39;s simulate a new CRS, assuming this was an image taken from a geostationary satellite, hovering above 72° E:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>projected_ras = Rasters.warp(</span></span>
<span class="line"><span>        ras,</span></span>
<span class="line"><span>        Dict(</span></span>
<span class="line"><span>            &quot;s_srs&quot; =&gt; convert(GeoFormatTypes.ProjString, Rasters.crs(ras)).val, # source CRS</span></span>
<span class="line"><span>            &quot;t_srs&quot; =&gt; &quot;+proj=geos +h=3578600 +lon_0=72&quot; # the CRS to which this should be transformed</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>    )</span></span></code></pre></div><p>This is what the raster would look like, if it were taken directly from a satellite image:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>heatmap(projected_ras; axis = (; aspect = DataAspect()))</span></span></code></pre></div><p>Now, we can create a GeoAxis with coastlines in the equal earth projection:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ga </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeoAxis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ga, GeoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coastlines</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+n+`" alt=""></p><p>The coastlines function returns points in the (lon, lat) coordinate reference system.</p><p>We will now plot our image, from the geostationary coordinate system:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>heatmap!(ga, projected_ras)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>Success! You can clearly see how the raster was adapted here.</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,18),o=[l];function r(h,c,d,g,k,u){return i(),e("div",null,o)}const y=a(p,[["render",r]]);export{E as __pageData,y as default};
