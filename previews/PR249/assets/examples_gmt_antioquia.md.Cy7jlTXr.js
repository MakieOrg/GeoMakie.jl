import{_ as a}from"./chunks/CpBd9pL8nqe.krzyCZj9.js";import{_ as s,c as e,o as i,a6 as n}from"./chunks/framework.BpSGFGTG.js";const t="/previews/PR249/assets/noalflt.Cv5TqLtp.png",y=JSON.parse('{"title":"GMT vector example","description":"","frontmatter":{},"headers":[],"relativePath":"examples/gmt/antioquia.md","filePath":"examples/gmt/antioquia.md","lastUpdated":null}'),p={name:"examples/gmt/antioquia.md"},l=n('<h1 id="GMT-vector-example" tabindex="-1">GMT vector example <a class="header-anchor" href="#GMT-vector-example" aria-label="Permalink to &quot;GMT vector example {#GMT-vector-example}&quot;">â€‹</a></h1><img src="'+a+`"><p>This example was translated from the <a href="https://www.generic-mapping-tools.org/GMTjl_doc/tutorials/vector_shp/vector_shp/" target="_blank" rel="noreferrer">equivalent GMT.jl example</a>.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import GMT # for data</span></span>
<span class="line"><span>using GeoMakie, Polylabel</span></span>
<span class="line"><span>using DataFrames</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import ZipFile, Shapefile</span></span>
<span class="line"><span></span></span>
<span class="line"><span>table = Shapefile.Table(joinpath(GMT.TESTSDIR, &quot;COL_adm2.shp.zip&quot;)) |&gt; DataFrame</span></span>
<span class="line"><span></span></span>
<span class="line"><span>antioquia_geoms = filter(:NAME_1 =&gt; ==(&quot;Antioquia&quot;), table)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>f, a, p = poly(antioquia_geoms.geometry; axis = (; type = GeoAxis))</span></span>
<span class="line"><span>tp = Makie.text!(a, Polylabel.polylabel.(antioquia_geoms.geometry); text = string.(antioquia_geoms.ID_2), align = (:center, :center))</span></span>
<span class="line"><span>tp.fontsize = 5</span></span>
<span class="line"><span>f</span></span></code></pre></div><p>Now that the polygons are labelled, we can also color them:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>f, a, p = poly(antioquia_geoms.geometry; color = antioquia_geoms.ID_2 .|&gt; identity, colormap = :bamako, axis = (; type = GeoAxis))</span></span>
<span class="line"><span>tp = Makie.text!(a, Polylabel.polylabel.(antioquia_geoms.geometry); text = string.(antioquia_geoms.ID_2), align = (:center, :center))</span></span>
<span class="line"><span>tp.fontsize = 5</span></span>
<span class="line"><span>a.title = &quot;Another Map of Antioquia&quot;</span></span>
<span class="line"><span>cb = Colorbar(f[1, 2], p)</span></span>
<span class="line"><span>f</span></span></code></pre></div><p>Note that this is not projected - the <code>proj=:guess</code> projection is not implemented in GeoMakie! However, we can project to an orthographic projection centered at the centroid of the geometry, using GeometryOps.jl to calculate the centroid.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cx, cy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(antioquia_geoms)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(-75.59169706596079, 6.910416654093001)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;+proj=ortho +lon_0=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$cx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +lat_0=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$cy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span></span></code></pre></div><p><img src="`+t+'" alt=""></p><p>That looks a lot more like what the GMT example does!</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>',14),o=[l];function r(h,c,d,g,k,m){return i(),e("div",null,o)}const b=s(p,[["render",r]]);export{y as __pageData,b as default};
