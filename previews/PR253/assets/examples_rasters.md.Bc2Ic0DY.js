import{_ as a}from"./chunks/LLxu8cSKwHE.R2ZiPZej.js";import{_ as s,c as e,o as t,a6 as i}from"./chunks/framework.CotGBqy8.js";const n="/previews/PR253/assets/dqustub.DA6w4WfD.png",v=JSON.parse('{"title":"Raster data (with Rasters.jl)","description":"","frontmatter":{},"headers":[],"relativePath":"examples/rasters.md","filePath":"examples/rasters.md","lastUpdated":null}'),p={name:"examples/rasters.md"},l=i('<h1 id="Raster-data-(with-Rasters.jl)" tabindex="-1">Raster data (with Rasters.jl) <a class="header-anchor" href="#Raster-data-(with-Rasters.jl)" aria-label="Permalink to &quot;Raster data (with Rasters.jl) {#Raster-data-(with-Rasters.jl)}&quot;">â€‹</a></h1><img src="'+a+`"><p><a href="https://github.com/rafaqz/Rasters.jl" target="_blank" rel="noreferrer">Rasters.jl</a> is a Julia package designed for working with raster data. It provides tools to read, write, and manipulate raster datasets, which are commonly used in geographic information systems (GIS), remote sensing, and similar fields where grid data is prevalent. It&#39;s built on top of <a href="https://github.com/rafaqz/DimensionalData.jl" target="_blank" rel="noreferrer">DimensionalData.jl</a>, which also underpins e.g. <a href="https://github.com/JuliaDataCubes/YAXArrays.jl" target="_blank" rel="noreferrer">YAXArrays.jl</a>.</p><p>In general, any input that works with base Makie will work with GeoMakie in a GeoAxis!</p><p>First, we&#39;ll load Rasters.jl, RasterDataSources.jl which provides access to common datasets, and ArchGDAL.jl which Rasters.jl depends on to read files.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters, RasterDataSources, ArchGDAL</span></span></code></pre></div><p>We&#39;ll also load GeoMakie and CairoMakie to plot the data.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoMakie, CairoMakie</span></span></code></pre></div><p>First, we can load a Raster from the <a href="https://www.earthenv.org" target="_blank" rel="noreferrer">EarthEnv</a> project, which represents habitat or ecosystem heterogeneity.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ras = Raster(EarthEnv{HabitatHeterogeneity}, :homogeneity) # habitat homogeneity to neighbouring pixel</span></span></code></pre></div><p>Let&#39;s take a look at this in regular Makie first:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>heatmap(ras; axis = (; aspect = DataAspect()))</span></span></code></pre></div><p>We can plot this in any projection:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fig = Figure(); ga = GeoAxis(fig[1, 1])</span></span>
<span class="line"><span>hm = heatmap!(ga, ras)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>We can also change the projection arbitrarily:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ga</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dest[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;+proj=ortho +lon_0=19 +lat_0=72&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+n+`" alt=""></p><p>and all other Makie keyword arguments also apply!</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>hm.colormap = :isoluminant_cgo_70_c39_n256</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>You can also use other recipes like surface:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fig = Figure(); ga = GeoAxis(fig[1, 1])</span></span>
<span class="line"><span>sp = surface!(ga, ras)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>This looks a bit strange - but you can always disable shading:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sp.shading = NoShading</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>See also the Geostationary image and Multiple CRS examples, where we explore how to plot data in different projections.</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,26),r=[l];function o(h,d,c,g,u,k){return t(),e("div",null,r)}const y=s(p,[["render",o]]);export{v as __pageData,y as default};
